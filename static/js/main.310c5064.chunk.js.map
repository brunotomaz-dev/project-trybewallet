{"version":3,"sources":["images/trybe_logo.png","redux/actions/index.js","pages/Login.js","redux/reducers/user.js","redux/reducers/wallet.js","redux/reducers/index.js","redux/store.js","components/Header.js","components/Table.js","components/WalletForm.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["SET_USER","SET_EXPENSES","GET_CURRENCIES","REMOVE_EXPENSES","EDITOR_EXPENSES","UPDATE_EXPENSES","editorExpenses","editStatus","type","fetchCurrency","dispatch","fetch","then","response","json","currencies","Object","keys","filter","coin","map","coins","fetchExchangeRates","state","value","expense","currency","method","tag","description","exchangeRates","rates","expenses","Login","validateMail","email","changeState","bool","setState","isValidMail","test","handleChange","target","name","validateChar","password","isValid","length","text","isDisabled","buttonClass","handleClick","props","emailDispatch","history","push","document","body","style","backgroundColor","this","className","src","logo","alt","htmlFor","id","placeholder","onChange","disabled","onClick","React","Component","connect","data","INITIAL_STATE","user","action","editor","idToEdit","wallet","setId","item","rootReducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Header","handleTotal","getState","soma","currentExchange","entries","rate","includes","ask","total","toFixed","unsubscribe","subscribe","userMail","Table","tableHeader","key","tableBody","walletExpenses","sort","a","b","entry","converted","Number","handleDeleteButton","handleEditButton","itemID","editorStatus","removeItems","newStatus","WalletForm","fetchExchange","handleEditClick","updateDispatch","filterById","mountSelect","buttonAdd","buttonEdit","fetchCurrencies","Wallet","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.310c5064.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/trybe_logo.6457a2c3.png\";","// Coloque aqui suas actions\nexport const SET_USER = 'set user email';\n\nexport const SET_EXPENSES = 'set expenses data';\n\nexport const GET_CURRENCIES = 'get currencies';\n\nexport const REMOVE_EXPENSES = 'remove expenses';\n\nexport const EDITOR_EXPENSES = 'change editor status';\n\nexport const UPDATE_EXPENSES = 'update expenses';\n\nexport const userAction = (email) => ({\n  type: SET_USER,\n  email,\n});\n\nexport const getCurrency = (currencies) => ({\n  type: GET_CURRENCIES,\n  currencies,\n});\n\nexport const getExpenses = (expenses) => ({\n  type: SET_EXPENSES,\n  expenses,\n});\n\nexport const removeExpenses = (expenses) => ({\n  type: REMOVE_EXPENSES,\n  expenses,\n});\n\nexport const editorExpenses = (editStatus) => ({\n  type: EDITOR_EXPENSES,\n  editStatus,\n});\n\nexport const updateExpenses = (expenses) => ({\n  type: UPDATE_EXPENSES,\n  expenses,\n});\n\nexport function fetchCurrency() {\n  return (dispatch) => fetch('https://economia.awesomeapi.com.br/json/all')\n    .then((response) => response.json())\n    .then((currencies) => Object.keys(currencies)\n      .filter((coin) => coin !== 'USDT').map((coin) => coin))\n    .then((coins) => dispatch(getCurrency(coins)));\n}\n\nexport function fetchExchangeRates(state) {\n  const { expense: value, currency, method, tag, description } = state;\n  return (dispatch) => fetch('https://economia.awesomeapi.com.br/json/all')\n    .then((response) => response.json())\n    .then((exchangeRates) => ({\n      value,\n      currency,\n      method,\n      tag,\n      description,\n      exchangeRates,\n    }))\n    .then((rates) => dispatch(getExpenses(rates)));\n}\n","import React from 'react';\nimport '../styles/login.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport logo from '../images/trybe_logo.png';\nimport { userAction } from '../redux/actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      isValidMail: false,\n      email: '',\n      password: '',\n      isDisabled: true,\n      buttonClass: 'disabled',\n    };\n  }\n\n  componentDidMount() {\n    document.body.style.backgroundColor = '#5f7e42';\n  }\n\n  validateMail = (email) => {\n    // https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Regular_Expressions\n    const validate = /\\S+@\\S+\\.\\S+/;\n    const isValid = validate.test(email);\n    const changeState = (bool) => this.setState({ isValidMail: bool });\n    return isValid ? changeState(true) : changeState(false);\n  }\n\n  handleChange = ({ target }) => {\n    const { value, name } = target;\n    this.setState({\n      [name]: value,\n    }, () => this.validateChar());\n  }\n\n  validateChar = () => {\n    const { email, password, isValidMail } = this.state;\n    const minChar = 5;\n    let isValid = false;\n    this.validateMail(email);\n    if (password.length > minChar && isValidMail) {\n      isValid = true;\n    }\n\n    const changeState = (bool, text) => this.setState({\n      isDisabled: bool,\n      buttonClass: text,\n    });\n    return !isValid\n      ? changeState(true, 'disabled')\n      : changeState(false, 'loginButton');\n  }\n\n  handleClick = () => {\n    const { emailDispatch, history } = this.props;\n    const { email } = this.state;\n    emailDispatch(email);\n    this.setState({ email: '', password: '' });\n    history.push('/carteira');\n  }\n\n  render() {\n    const { email, password, isDisabled, buttonClass } = this.state;\n    return (\n      <section className=\"login\">\n        <img src={ logo } alt=\"trybe\" className=\"loginLogo\" />\n        <label htmlFor=\"email\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"email\"\n            placeholder=\"Email\"\n            data-testid=\"email-input\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n\n        </label>\n        <label htmlFor=\"password\">\n          <input\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            placeholder=\"Senha\"\n            data-testid=\"password-input\"\n            value={ password }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <button\n          type=\"button\"\n          className={ buttonClass }\n          disabled={ isDisabled }\n          onClick={ this.handleClick }\n        >\n          Entrar\n        </button>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => (\n  { emailDispatch: (data) => { dispatch(userAction(data)); } }\n);\n\nLogin.propTypes = {\n  emailDispatch: PropTypes.func.isRequired,\n  history: PropTypes.objectOf(String).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import { SET_USER } from '../actions';\n\n// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_USER:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import {\n  EDITOR_EXPENSES,\n  GET_CURRENCIES,\n  REMOVE_EXPENSES,\n  SET_EXPENSES,\n  UPDATE_EXPENSES,\n} from '../actions';\n\n// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [], // strings\n  expenses: [], // objetos com id, value, currency, method, tag, description exchangeRates\n  editor: false, // indica se despesa está sendo editada\n  idToEdit: 0, // id da despesa que é editada\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  const setId = () => (state.expenses.length > 0 ? state.expenses.length : 0);\n  switch (action.type) {\n  case GET_CURRENCIES:\n    return {\n      ...state,\n      currencies: action.currencies,\n    };\n  case SET_EXPENSES:\n    return {\n      ...state,\n      expenses: [...state.expenses, { id: setId(), ...action.expenses }],\n    };\n  case UPDATE_EXPENSES:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses\n          .filter((item) => action.expenses.id !== item.id), action.expenses,\n      ],\n    };\n  case REMOVE_EXPENSES:\n    return {\n      ...state,\n      expenses: action.expenses,\n    };\n  case EDITOR_EXPENSES:\n    return {\n      ...state,\n      ...action.editStatus,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducers = combineReducers({ user, wallet });\n\nexport default rootReducers;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducers from './reducers';\n\n// configure aqui sua store\nconst store = createStore(rootReducers, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n} // para uso dos testes\n\nexport default store;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport logo from '../images/trybe_logo.png';\nimport store from '../redux/store';\n\nclass Header extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      total: 0,\n    };\n  }\n\n  handleTotal = () => {\n    const currentStore = store.getState();\n    const { wallet: { expenses } } = currentStore;\n    let soma = 0;\n    expenses.map((item) => {\n      const { exchangeRates, value, currency } = item;\n      const exchangeCurrency = Object.entries(exchangeRates)\n        .filter((rate) => rate.includes(currency));\n      const currentExchange = value * exchangeCurrency[0][1].ask;\n      soma += currentExchange;\n      return soma;\n    });\n    this.setState({\n      total: soma.toFixed(2),\n    });\n  }\n\n  unsubscribe = () => {\n    store.subscribe(this.handleTotal);\n  }\n\n  render() {\n    this.unsubscribe();\n    const { userMail } = this.props;\n    const { total } = this.state;\n    return (\n      <div className=\"header\">\n        <div>\n          <img src={ logo } alt=\"Trybe Logo\" />\n        </div>\n        <div data-testid=\"email-field\">\n          Email:\n          {' '}\n          {userMail}\n        </div>\n        <div>\n          R$\n          <div data-testid=\"total-field\">\n            { total }\n          </div>\n        </div>\n        <div data-testid=\"header-currency-field\">BRL</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userMail: state.user.email,\n});\n\nHeader.propTypes = {\n  userMail: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { editorExpenses, removeExpenses } from '../redux/actions';\nimport '../styles/wallet-table.css';\n\nclass Table extends Component {\n  tableHeader = () => {\n    const arrayHeader = [\n      'Descrição',\n      'Tag',\n      'Método de pagamento',\n      'Valor',\n      'Moeda',\n      'Câmbio utilizado',\n      'Valor convertido',\n      'Moeda de conversão',\n      'Editar/Excluir',\n    ];\n    return arrayHeader.map((item) => <th key={ item }>{item}</th>);\n  };\n\n  tableBody = () => {\n    const { walletExpenses } = this.props;\n    const neg = -1;\n    const sort = walletExpenses.sort(\n      (a, b) => {\n        if (a.id < b.id) {\n          return neg;\n        }\n        if (a.id > b.id) {\n          return 1;\n        }\n        // a deve ser igual a b\n        return 0;\n      },\n    );\n    return sort.map((expense) => {\n      const\n        {\n          currency,\n          description,\n          exchangeRates,\n          id,\n          method,\n          tag,\n          value,\n        } = expense;\n      const filterRares = Object.entries(exchangeRates)\n        .filter((entry) => entry.includes(currency));\n      const { ask, name } = filterRares[0][1];\n      const converted = Number(value) * Number(ask);\n      return (\n        <tr key={ id }>\n          <td>{description}</td>\n          <td>{tag}</td>\n          <td>{method}</td>\n          <td>{Number(value).toFixed(2)}</td>\n          <td>{name}</td>\n          <td>{Number(ask).toFixed(2)}</td>\n          <td>{converted.toFixed(2)}</td>\n          <td>Real</td>\n          <td>\n            <button\n              className=\"delete-btn\"\n              type=\"button\"\n              data-testid=\"delete-btn\"\n              onClick={ () => this.handleDeleteButton(id) }\n            >\n              Excluir\n            </button>\n            <button\n              className=\"edit-btn\"\n              type=\"button\"\n              data-testid=\"edit-btn\"\n              onClick={ () => this.handleEditButton(id) }\n            >\n              Editar\n            </button>\n          </td>\n        </tr>\n      );\n    });\n  };\n\n  handleEditButton = (itemID) => {\n    const { editorStatus } = this.props;\n    const storeAtualization = {\n      idToEdit: itemID,\n      editor: true,\n    };\n    editorStatus(storeAtualization);\n  }\n\n  handleDeleteButton = (itemID) => {\n    const { walletExpenses, removeItems } = this.props;\n    const filterToRemove = walletExpenses.filter((item) => itemID !== item.id);\n    removeItems(filterToRemove);\n  }\n\n  render() {\n    return (\n      <table className=\"table\">\n        <thead>\n          <tr>{this.tableHeader()}</tr>\n        </thead>\n        <tbody>{this.tableBody()}</tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  walletExpenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeItems: (item) => { dispatch(removeExpenses(item)); },\n  editorStatus: (newStatus) => { dispatch(editorExpenses(newStatus)); },\n});\n\nTable.propTypes = {\n  walletExpenses: PropTypes.arrayOf(Object).isRequired,\n  removeItems: PropTypes.func.isRequired,\n  editorStatus: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  editorExpenses, fetchCurrency, fetchExchangeRates, updateExpenses,\n} from '../redux/actions';\n\nclass WalletForm extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      expense: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n  }\n\n  componentDidMount() {\n    const { fetchCurrencies } = this.props;\n    fetchCurrencies();\n  }\n\n  handleChange = ({ target }) => {\n    const { value, name } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClick = () => {\n    const { fetchExchange } = this.props;\n    fetchExchange(this.state);\n    this.setState({\n      expense: '',\n      description: '',\n    });\n  }\n\n  handleEditClick = () => {\n    const {\n      editorStatus, updateDispatch, wallet: { expenses: walletExpenses, idToEdit },\n    } = this.props;\n    const { expense: value, description, currency, method, tag } = this.state;\n    const filterById = walletExpenses.filter((item) => idToEdit === item.id);\n    const updatedExpense = {\n      ...filterById[0], value, description, currency, method, tag,\n    };\n\n    updateDispatch(updatedExpense);\n    editorStatus({\n      idToEdit: 0,\n      editor: false,\n    });\n    this.setState({\n      expense: '',\n      description: '',\n    });\n  }\n\n  mountSelect = () => {\n    const { wallet: { currencies } } = this.props;\n    return currencies\n      .map((currency) => (\n        <option\n          className=\"wallet-option\"\n          key={ currency }\n          value={ currency }\n        >\n          {currency}\n        </option>));\n  }\n\n  buttonAdd = () => (\n    <button\n      className=\"wallet-button\"\n      type=\"button\"\n      onClick={ this.handleClick }\n    >\n      Adicionar Despesa\n    </button>\n  )\n\n  buttonEdit = () => (\n    <button\n      className=\"wallet-button\"\n      type=\"button\"\n      onClick={ this.handleEditClick }\n    >\n      Editar despesa\n    </button>\n  )\n\n  render() {\n    const { expense, description, currency } = this.state;\n    const { wallet: { editor } } = this.props;\n    return (\n      <div className=\"wallet-form\">\n        <label htmlFor=\"expense\">\n          Valor:\n          {' '}\n          <input\n            className=\"wallet\"\n            data-testid=\"value-input\"\n            type=\"number\"\n            name=\"expense\"\n            id=\"expense\"\n            value={ expense }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"description\">\n          Descrição:\n          {' '}\n          <input\n            className=\"wallet\"\n            data-testid=\"description-input\"\n            type=\"text\"\n            name=\"description\"\n            id=\"description\"\n            value={ description }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"currency\">\n          Moeda:\n          {' '}\n          <select\n            className=\"wallet\"\n            data-testid=\"currency-input\"\n            name=\"currency\"\n            id=\"currency\"\n            value={ currency }\n            onChange={ this.handleChange }\n          >\n            {this.mountSelect()}\n          </select>\n        </label>\n        <label htmlFor=\"method\">\n          Método de Pagamento:\n          {' '}\n          <select\n            className=\"wallet\"\n            data-testid=\"method-input\"\n            name=\"method\"\n            id=\"method\"\n            onChange={ this.handleChange }\n          >\n            <option\n              className=\"wallet-option\"\n              value=\"Dinheiro\"\n            >\n              Dinheiro\n            </option>\n            <option\n              className=\"wallet-option\"\n              value=\"Cartão de crédito\"\n            >\n              Cartão de crédito\n            </option>\n            <option\n              className=\"wallet-option\"\n              value=\"Cartão de débito\"\n            >\n              Cartão de débito\n            </option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Categoria:\n          {' '}\n          <select\n            className=\"wallet\"\n            data-testid=\"tag-input\"\n            name=\"tag\"\n            id=\"tag\"\n            onChange={ this.handleChange }\n\n          >\n            <option className=\"wallet-option\" value=\"Alimentação\">Alimentação</option>\n            <option className=\"wallet-option\" value=\"Lazer\">Lazer</option>\n            <option className=\"wallet-option\" value=\"Trabalho\">Trabalho</option>\n            <option className=\"wallet-option\" value=\"Transporte\">Transporte</option>\n            <option className=\"wallet-option\" value=\"Saúde\">Saúde</option>\n          </select>\n        </label>\n        { editor ? this.buttonEdit() : this.buttonAdd() }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  wallet: state.wallet,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrencies: () => { dispatch(fetchCurrency()); },\n  fetchExchange: (state) => { dispatch(fetchExchangeRates(state)); },\n  updateDispatch: (state) => { dispatch(updateExpenses(state)); },\n  editorStatus: (newStatus) => { dispatch(editorExpenses(newStatus)); },\n});\n\nWalletForm.propTypes = {\n  fetchCurrencies: PropTypes.func.isRequired,\n  fetchExchange: PropTypes.func.isRequired,\n  updateDispatch: PropTypes.func.isRequired,\n  wallet: PropTypes.objectOf(Array).isRequired,\n  editorStatus: PropTypes.func.isRequired,\n\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletForm);\n","import React from 'react';\nimport Header from '../components/Header';\nimport Table from '../components/Table';\nimport WalletForm from '../components/WalletForm';\nimport '../styles/wallet.css';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    document.body.style.backgroundColor = 'white';\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <WalletForm />\n        <h2>Tabela de Despesas</h2>\n        <Table />\n      </>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route path=\"/\" exact component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}